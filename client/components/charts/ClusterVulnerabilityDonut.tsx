import React, { useMemo } from "react";
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import { ClusterVulnerabilityStatus } from "@shared/api";
import { PieChart, Pie, Cell } from "recharts";

type Props = {
  cluster: ClusterVulnerabilityStatus;
};

const SEVERITY_ORDER: Array<"Critical" | "High" | "Medium" | "Low"> = [
  "Critical",
  "High",
  "Medium",
  "Low",
];

const COLORS: Record<string, string> = {
  Critical: "hsl(var(--support-01))", // red
  High: "#f97316", // orange-500
  Medium: "hsl(var(--support-03))", // yellow
  Low: "#38bdf8", // sky-400 light blue
};

export function ClusterVulnerabilityDonut({ cluster }: Props) {
  const { data, total } = useMemo(() => {
    const counts = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
    } as Record<"Critical" | "High" | "Medium" | "Low", number>;

    cluster.nodes.forEach((node) => {
      node.containerImages.forEach((img) => {
        (img.vulnerabilities || []).forEach((v) => {
          if (v.severity in counts) counts[v.severity as keyof typeof counts] += 1;
        });
      });
    });

    const series = SEVERITY_ORDER.map((sev) => ({
      name: sev,
      value: counts[sev],
      fill: COLORS[sev],
    }));

    const total = series.reduce((acc, s) => acc + s.value, 0);
    return { data: series.filter((s) => s.value > 0), total };
  }, [cluster]);

  return (
    <div className="relative">
      <ChartContainer
        className="aspect-square w-full max-h-56"
        config={{
          Critical: { label: "Critical", color: COLORS.Critical },
          High: { label: "High", color: COLORS.High },
          Medium: { label: "Medium", color: COLORS.Medium },
          Low: { label: "Low", color: COLORS.Low },
        }}
      >
        <PieChart>
          <Pie
            data={data.length > 0 ? data : [{ name: "none", value: 1, fill: "hsl(var(--ui-03))" }]}
            dataKey="value"
            nameKey="name"
            innerRadius={48}
            outerRadius={80}
            strokeWidth={2}
            isAnimationActive={false}
          >
            {(data.length > 0 ? data : [{ name: "none", value: 1, fill: "hsl(var(--ui-03))" }]).map(
              (entry, index) => (
                <Cell key={`${entry.name}-${index}`} fill={entry.fill as string} />
              ),
            )}
          </Pie>
          <ChartTooltip
            content={<ChartTooltipContent nameKey="name" />}
            formatter={(value, name) => [value as number, name as string]}
          />
        </PieChart>
      </ChartContainer>
      <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
        <div className="text-center">
          <div className="text-xl font-semibold text-text-01">{total}</div>
          <div className="carbon-type-label-01 text-text-02">Vulnerabilities</div>
        </div>
      </div>
    </div>
  );
}
