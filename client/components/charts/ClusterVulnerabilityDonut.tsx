import React, { useMemo } from "react";
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import { ClusterVulnerabilityStatus } from "@shared/api";
import { BarChart, Bar, XAxis, YAxis } from "recharts";

type Props = {
  cluster: ClusterVulnerabilityStatus;
};

const SEVERITY_ORDER: Array<"Critical" | "High" | "Medium" | "Low"> = [
  "Critical",
  "High",
  "Medium",
  "Low",
];

const COLORS: Record<string, string> = {
  Critical: "hsl(var(--support-01))", // red
  High: "#f97316", // orange-500
  Medium: "hsl(var(--support-03))", // yellow
  Low: "#38bdf8", // sky-400 light blue
};

export function ClusterVulnerabilityDonut({ cluster }: Props) {
  const { data, total } = useMemo(() => {
    const counts = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
    } as Record<"Critical" | "High" | "Medium" | "Low", number>;

    cluster.nodes.forEach((node) => {
      node.containerImages.forEach((img) => {
        (img.vulnerabilities || []).forEach((v) => {
          if (v.severity in counts) counts[v.severity as keyof typeof counts] += 1;
        });
      });
    });

    const total = Object.values(counts).reduce((a, b) => a + b, 0);
    const barData = [{ name: "counts", ...counts }];
    return { data: barData, total };
  }, [cluster]);

  return (
    <div className="relative">
      <ChartContainer
        className="w-full max-h-36"
        config={{
          Critical: { label: "Critical", color: COLORS.Critical },
          High: { label: "High", color: COLORS.High },
          Medium: { label: "Medium", color: COLORS.Medium },
          Low: { label: "Low", color: COLORS.Low },
        }}
      >
        <BarChart data={data} layout="vertical" margin={{ top: 8, right: 8, bottom: 8, left: 8 }}>
          <XAxis type="number" hide domain={[0, "dataMax"]} />
          <YAxis type="category" dataKey="name" hide />
          <Bar dataKey="Critical" stackId="a" fill={COLORS.Critical} />
          <Bar dataKey="High" stackId="a" fill={COLORS.High} />
          <Bar dataKey="Medium" stackId="a" fill={COLORS.Medium} />
          <Bar dataKey="Low" stackId="a" fill={COLORS.Low} />
          <ChartTooltip content={<ChartTooltipContent />} />
        </BarChart>
      </ChartContainer>
      <div className="mt-2 text-center">
        <div className="text-sm text-text-02">
          Total: <span className="text-text-01 font-medium">{total}</span>
        </div>
      </div>
    </div>
  );
}
